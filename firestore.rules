rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    match /videos/{videoId} {
      allow read: if true;
      allow create: if request.auth != null 
        && request.resource.data.userId == request.auth.uid;
      allow update, delete: if request.auth != null 
        && resource.data.userId == request.auth.uid;
    }

    match /users/{userId} {
      allow read: if true;
      allow create: if request.auth != null 
        && userId == request.auth.uid
        && request.resource.data.uid == request.auth.uid
        && request.resource.data.createdAt is string
        && request.resource.data.updatedAt is string;
      allow update: if request.auth != null 
        && userId == request.auth.uid
        && request.resource.data.uid == userId
        && request.resource.data.updatedAt is string
        && (!request.resource.data.diff(resource.data).affectedKeys()
            .hasAny(['uid', 'createdAt']));
      allow delete: if false;
    }

    match /applications/{applicationId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null 
        && request.resource.data.candidateId == request.auth.uid
        && request.resource.data.createdAt is string
        && request.resource.data.updatedAt is string;
      allow update: if request.auth != null 
        && resource.data.candidateId == request.auth.uid
        && request.resource.data.candidateId == request.auth.uid
        && request.resource.data.updatedAt is string;
      allow delete: if request.auth != null 
        && resource.data.candidateId == request.auth.uid;
    }

    match /parsedPDFs/{jobId} {
      allow read, write: if request.auth != null;
    }

    match /parsedCVs/{cvId} {
      allow read, write: if request.auth != null;
    }

    match /rejectedJobs/{document} {
      allow read, write: if request.auth != null;
    }
  }
}