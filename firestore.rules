rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    function isAgent() {
      return request.auth != null && request.auth.token.agent == true;
    }

    function isValidEmbeddingUpdate() {
      let diff = request.resource.data.diff(resource.data);
      return !diff.affectedKeys().hasAny(['embedding', 'last_embedded', 'embedding_error', 'last_embedding_attempt']);
    }

    // New rules for jobs collection
    match /jobs/{jobId} {
      allow read: if true;  // Jobs are publicly readable
      allow create, update: if request.auth != null && isAgent();  // Only agents can create/update jobs
      allow delete: if false;  // Jobs should never be deleted
    }

    match /job_openings/{jobId} {
      allow read: if true;
      allow create: if request.auth != null 
        && request.resource.data.userId == request.auth.uid
        && !request.resource.data.keys().hasAny(['embedding', 'last_embedded', 'embedding_error', 'last_embedding_attempt']);
      allow update: if request.auth != null 
        && resource.data.userId == request.auth.uid
        && isValidEmbeddingUpdate();
      allow delete: if request.auth != null 
        && resource.data.userId == request.auth.uid;
    }

    match /users/{userId} {
      allow read: if request.auth != null;  
      allow create: if request.auth != null 
        && userId == request.auth.uid
        && request.resource.data.uid == request.auth.uid
        && request.resource.data.createdAt is string
        && request.resource.data.updatedAt is string
        && !request.resource.data.keys().hasAny(['embedding', 'last_embedded', 'embedding_error', 'last_embedding_attempt']);
      allow update: if request.auth != null 
        && userId == request.auth.uid
        && request.resource.data.uid == userId
        && request.resource.data.updatedAt is string
        && (!request.resource.data.diff(resource.data).affectedKeys()
            .hasAny(['uid', 'createdAt']))
        && isValidEmbeddingUpdate();
      allow delete: if false;
    }

    match /applications/{applicationId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null 
        && request.resource.data.candidateId == request.auth.uid
        && request.resource.data.createdAt is string
        && request.resource.data.updatedAt is string;
      allow update: if (
        request.auth != null && (
          (resource.data.candidateId == request.auth.uid
           && request.resource.data.candidateId == request.auth.uid
           && request.resource.data.updatedAt is string)
          ||
          (isAgent() 
           && request.resource.data.candidateId == resource.data.candidateId)
        )
      );
      allow delete: if request.auth != null 
        && resource.data.candidateId == request.auth.uid
        && resource.data.status == 'draft';
    }

    match /parsedPDFs/{jobId} {
      allow read, write: if request.auth != null;
    }

    match /parsedCVs/{cvId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null 
        && request.resource.data.userId == request.auth.uid;
    }

    match /rejectedJobs/{document} {
      allow read, write: if request.auth != null;
    }
  }
}